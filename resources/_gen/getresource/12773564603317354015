HTTP/2.0 200 OK
Accept-Ranges: bytes
Access-Control-Allow-Origin: *
Age: 0
Cache-Control: max-age=600
Content-Type: text/html; charset=utf-8
Date: Sun, 04 Feb 2024 21:31:24 GMT
Etag: W/"650e4479-5f6e"
Expires: Sun, 04 Feb 2024 19:41:46 GMT
Last-Modified: Sat, 23 Sep 2023 01:50:49 GMT
Server: GitHub.com
Vary: Accept-Encoding
Via: 1.1 varnish
X-Cache: HIT
X-Cache-Hits: 1
X-Fastly-Request-Id: 7a5daa030140832716520f52f162101eeb632d9b
X-Github-Request-Id: F64E:118129:350EC3:3EF153:65BFE622
X-Proxy-Cache: MISS
X-Served-By: cache-bfi-kbfi7400040-BFI
X-Timer: S1707082284.063679,VS0,VE71

<!doctype html><html lang=en dir=ltr prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#"><head><meta name=generator content="Hugo 0.115.4"><meta charset=utf-8><meta name=viewport content="width=device-width,initial-scale=1"><title>task-runner for automation pipelines defined in yaml | pypyr</title><meta name=description content="pypyr is a task-runner CLI & API with straightforward yaml pipelines. Free & open-source. Agentless task automation."><link rel=stylesheet href=https://pypyr.io/css/styles.min.20040172c38a54ec5170c87ad05ee287e7260192dd12a2fa3996423da943c34f.css integrity="sha256-IAQBcsOKVOxRcMh60F7ih+cmAZLdEqL6OZZCPalDw08="><link rel=stylesheet href=https://pypyr.io/css/code-highlight.min.78f63f1d4f45beaf423efd3dc8e6914c2abdca1b5391cd91368a32efecd9d7e3.css integrity="sha256-ePY/HU9Fvq9CPv09yOaRTCq9yhtTkc2RNooy7+zZ1+M="><script defer src=https://pypyr.io/js/script.min.91263db5f27c955af051b264cd9eda63102d476e77c28fb44032a2432be2cfc1.js integrity="sha256-kSY9tfJ8lVrwUbJkzZ7aYxAtR253wo+0QDKiQyviz8E="></script>
<link href="https://fonts.googleapis.com/css?family=Open+Sans:400,600,700%7cRoboto+Mono:400,400i&amp;display=swap" rel=stylesheet><link rel=canonical href=https://pypyr.io/><link rel=alternate type=application/rss+xml href=https://pypyr.io/index.xml title=pypyr><script async src="https://www.googletagmanager.com/gtag/js?id=UA-147150909-1"></script>
<script>window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments)}gtag("js",new Date),gtag("config","UA-147150909-1")</script><meta property="og:description" content="pypyr is a task-runner CLI & API with straightforward yaml pipelines. Free & open-source. Agentless task automation."><meta property="og:image" content="https://pypyr.io/images/1.91x1/pypyr-taskrunner-yaml-pipeline-automation-1200x628.5aa6465b3b9d2ca8d0d5a9f794ba7f379c522a8ba503129f2a35d2479ea2452d.png"><meta property="og:image:alt" content="pypyr is an open-source task-runner for automation pipelines defined in simple human-readable yaml."><meta property="og:image:height" content="628"><meta property="og:image:type" content="image/png"><meta property="og:image:width" content="1200"><meta property="og:site_name" content="pypyr technical documentation"><meta property="og:title" content="pypyr: task-runner for automation pipelines defined in yaml"><meta property="og:type" content="website"><meta property="og:url" content="https://pypyr.io/"><meta name=twitter:card content="summary_large_image"><meta name=twitter:site content="@pypyrpipes"><script type=application/ld+json>{"@context":"https://schema.org","@graph":[{"@id":"https://pypyr.io/#organization","@type":"Organization","name":"pypyr","url":"https://pypyr.io/","description":"The pypyr project is a free open-source task-runner cli \u0026 python api for automation pipelines.","logo":{"@type":"ImageObject","url":"https://pypyr.io/images/pypyr-taskrunner-logo-square.63875e43ff40d8ae40e93a6043b4328b962f54f52974aaa27cedec52220de665.svg","height":112,"width":112},"sameAs":["https://github.com/pypyr/","https://twitter.com/pypyrpipes/","https://pypi.org/user/pypyr/","https://hub.docker.com/u/pypyr/","https://en.gravatar.com/pypyr/"]},{"@type":"TechArticle","author":{"@type":"Person","name":"pypyr contributor","url":"https://pypyr.io/"},"articleSection":"pypyr","dateModified":"2022-02-10T16:43:03Z","datePublished":"2020-08-13T00:00:00Z","headline":"pypyr: task-runner for automation pipelines defined in yaml","image":[{"@type":"ImageObject","url":"https://pypyr.io/images/1x1/pypyr-taskrunner-yaml-pipeline-automation-1200x1200.52764d3c6f40232b3cdc33f5b8fbaeadad56cc310c8dd5588d30828296b5290d.png","height":1200,"width":1200},{"@type":"ImageObject","url":"https://pypyr.io/images/4x3/pypyr-taskrunner-yaml-pipeline-automation-1200x900.e8e70443377aeb11c190835e8d2ed0c844d31a82a0c2e8a744a9999cd03e0de9.png","height":900,"width":1200},{"@type":"ImageObject","url":"https://pypyr.io/images/16x9/pypyr-taskrunner-yaml-pipeline-automation-1920x1080.cc9ae11626c8312e087058adb13bfff702162ce39c355065170c1b87850f3034.png","height":1080,"width":1920}],"inLanguage":"en","mainEntityOfPage":{"@type":"WebPage","@id":"https://pypyr.io/"},"publisher":{"@id":"https://pypyr.io/#organization"},"thumbnailUrl":"https://pypyr.io/images/pypyr-taskrunner-logo-square.63875e43ff40d8ae40e93a6043b4328b962f54f52974aaa27cedec52220de665.svg","url":"https://pypyr.io/"},{"@type":"SoftwareApplication","name":"pypyr","description":"Open-source task-runner for yaml pipeline workflow automation, script orchestration. A devops CI/CD automation tool.","operatingSystem":"MacOS, Linux, Windows, FreeBSD, anywhere Python runs","applicationCategory":"DeveloperApplication","softwareRequirements":"Python 3.6 or higher","maintainer":{"@id":"https://pypyr.io/#organization"},"offers":{"@type":"Offer","price":0}}]}</script><link rel=apple-touch-icon sizes=180x180 href=/favicons/apple-touch-icon.925deabb48d91a80924b5d04ff56d2b8f42ba1d1e1438cb7d8948cce1138208c.png><link rel=icon type=image/png sizes=32x32 href=/favicons/favicon-32x32.b869433d27c4679a5fbce03a8489268a539cbc781259bff14618ae2f018334e6.png><link rel=icon type=image/png sizes=16x16 href=/favicons/favicon-16x16.8bcd9f870e0a86445e0505ce6e816b76a40b08a06e2dcd1ec1f90c395ecbeaf6.png><link rel=manifest href=/favicons/site.3dad2bd5063ad6bc11f741ea28adf4df8b9370196f6e64af6789cf181cef05c6.webmanifest><link rel="shortcut icon" href=/favicons/favicon.4a2a3dffd965a7c571df0375e35f59307bc72adc08e3ef7021d5d5f02e6ef5a8.ico><meta name=msapplication-TileColor content="#00aba9"><meta name=msapplication-config content="/favicons/browserconfig.bbdaec7f39b7bd1f2d6bc484afdd0c7246e3af9c5b45d91198d8a3b42e024e1f.xml"><meta name=theme-color content="#121212"></head><body class=header-content-footer-grid><header class="header elevation-01"><nav class="top-nav-links nav-center" aria-label="top navigation"><ul class=nav-items-center><li><a href=/docs/>docs</a></li><li><a href=/updates/>updates</a></li><li><a href=/topics/>topics</a></li><li><a href=https://twitter.com/pypyrpipes/><span class=top-nav-links-pre><svg viewBox="0 0 250 203.18"><title>twitter link</title><use xlink:href="https://pypyr.io/images/twitter-logo.4bee83a61c7b1a567b9a00ea1ac9388de3b16ffbffac9e228f998a5411894c59.svg#twitter-logo"/></svg></span></a></li><li><a href=https://github.com/pypyr/pypyr/><span class=top-nav-links-pre><svg viewBox="0 0 477 97.41"><title>github repo</title><use xlink:href="https://pypyr.io/images/github-mark-and-logo.5df312655c6a99a4953b544d02b13a948fa4d66bda21e772206f0ed96663f05b.svg#github-mark-and-logo"/></svg></span></a></li></ul></nav></header><div class=body-content><main><div class=home-hero><img class=home-hero-img src=https://pypyr.io/images/pypyr-logotype.2c9aa98c472f0ea8d436597c26ef1b0f042624ee19cdf69bcb89ac0025d146c4.svg alt="pypyr logo"><header class=home-hero-title><h1>task runner for automation pipelines</h1><h2>script sequential task workflow steps in yaml</h2><h3>conditional execution, loops, error handling & retries</h3><span class=subtitle><p>For when your shell scripts get out of hand. Less tricky than makefile.</p><p>Simple variable substitution & configuration file management.</p><p>Automate anything by combining commands, different scripts in different languages & applications into one pipeline process.</p><p>If you&rsquo;re new, <a href=/docs/getting-started>get started here</a>.</p></span></header><div class=home-hero-install><div class=app-window><div class=app-window-top-bar><span class=app-window-buttons><span class="circle red"></span><span class="circle yellow"></span><span class="circle green"></span></span>
<span class=app-window-title>term</span></div><div class=app-window-content><div class=highlight><pre tabindex=0 class=chroma><code class=language-fish data-lang=fish><span class=line><span class=cl><span class=nv>$ </span>pip install pypyr</span></span></code></pre></div></div></div></div><div class=home-hero-show-support><p>pypyr is free & open-source.</p><p>You can show your support by ⭐ <a href=https://github.com/pypyr/pypyr>starring the pypyr repo on github</a> ⭐!</p><p>pypyr runs on Linux, MacOS & Windows - anywhere with a Python runtime.</p></div><div class=home-hero-2-col><div class=home-hero-left><div class=highlight><pre tabindex=0 class=chroma><code class=language-yaml data-lang=yaml><span class=line><span class=cl><span class=c># ./show-me-what-you-got.yaml</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w></span><span class=nt>context_parser</span><span class=p>:</span><span class=w> </span><span class=l>pypyr.parser.keyvaluepairs</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w></span><span class=nt>steps</span><span class=p>:</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>  </span>- <span class=nt>name</span><span class=p>:</span><span class=w> </span><span class=l>pypyr.steps.echo</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=nt>in</span><span class=p>:</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>      </span><span class=nt>echoMe</span><span class=p>:</span><span class=w> </span><span class=l>o hai!</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>  </span>- <span class=nt>name</span><span class=p>:</span><span class=w> </span><span class=l>pypyr.steps.cmd</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=nt>in</span><span class=p>:</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>      </span><span class=nt>cmd</span><span class=p>:</span><span class=w> </span><span class=l>echo any cmd you like</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>  </span>- <span class=nt>name</span><span class=p>:</span><span class=w> </span><span class=l>pypyr.steps.shell</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=nt>in</span><span class=p>:</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>      </span><span class=nt>cmd</span><span class=p>:</span><span class=w> </span><span class=l>echo ninja shell power | grep &#39;^ninja.*r$&#39; </span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>  </span>- <span class=nt>name</span><span class=p>:</span><span class=w> </span><span class=l>pypyr.steps.py</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=nt>in</span><span class=p>:</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>      </span><span class=nt>py</span><span class=p>:</span><span class=w> </span><span class=l>print(&#39;any python you like&#39;)</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>  </span>- <span class=nt>name</span><span class=p>:</span><span class=w> </span><span class=l>pypyr.steps.cmd</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=nt>while</span><span class=p>:</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>      </span><span class=nt>max</span><span class=p>:</span><span class=w> </span><span class=m>3</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=nt>in</span><span class=p>:</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>      </span><span class=nt>cmd</span><span class=p>:</span><span class=w> </span><span class=l>echo gimme a {whileCounter}</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>  </span>- <span class=nt>name</span><span class=p>:</span><span class=w> </span><span class=l>pypyr.steps.cmd</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=nt>foreach</span><span class=p>:</span><span class=w> </span><span class=p>[</span><span class=l>once, twice, thrice]</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=nt>in</span><span class=p>:</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>      </span><span class=nt>cmd</span><span class=p>:</span><span class=w> </span><span class=l>echo say {i}</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>  </span>- <span class=nt>name</span><span class=p>:</span><span class=w> </span><span class=l>pypyr.steps.default</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=nt>in</span><span class=p>:</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>      </span><span class=nt>defaults</span><span class=p>:</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>        </span><span class=nt>sayBye</span><span class=p>:</span><span class=w> </span><span class=kc>False</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>  </span>- <span class=nt>name</span><span class=p>:</span><span class=w> </span><span class=l>pypyr.steps.echo</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=nt>run</span><span class=p>:</span><span class=w> </span><span class=s1>&#39;{sayBye}&#39;</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>    </span><span class=nt>in</span><span class=p>:</span><span class=w>
</span></span></span><span class=line><span class=cl><span class=w>      </span><span class=nt>echoMe</span><span class=p>:</span><span class=w> </span><span class=l>k bye!</span><span class=w>
</span></span></span></code></pre></div></div><div class=home-hero-right><div class=app-window><div class=app-window-top-bar><span class=app-window-buttons><span class="circle red"></span><span class="circle yellow"></span><span class="circle green"></span></span>
<span class=app-window-title>term</span></div><div class=app-window-content><div class=highlight><pre tabindex=0 class=chroma><code class=language-text data-lang=text><span class=line><span class=cl>$ pypyr show-me-what-you-got
</span></span><span class=line><span class=cl>o hai!
</span></span><span class=line><span class=cl>any cmd you like
</span></span><span class=line><span class=cl>ninja shell power
</span></span><span class=line><span class=cl>any python you like
</span></span><span class=line><span class=cl>gimme a 1
</span></span><span class=line><span class=cl>gimme a 2
</span></span><span class=line><span class=cl>gimme a 3
</span></span><span class=line><span class=cl>say once
</span></span><span class=line><span class=cl>say twice
</span></span><span class=line><span class=cl>say thrice
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>$ pypyr show-me-what-you-got sayBye=true  
</span></span><span class=line><span class=cl>o hai!
</span></span><span class=line><span class=cl>any cmd you like
</span></span><span class=line><span class=cl>ninja shell power
</span></span><span class=line><span class=cl>any python you like
</span></span><span class=line><span class=cl>gimme a 1
</span></span><span class=line><span class=cl>gimme a 2
</span></span><span class=line><span class=cl>gimme a 3
</span></span><span class=line><span class=cl>say once
</span></span><span class=line><span class=cl>say twice
</span></span><span class=line><span class=cl>say thrice
</span></span><span class=line><span class=cl>k bye!
</span></span></code></pre></div></div></div></div></div></div><section class=cards><div class="card elevation-01"><h4>combine commands, applications & scripts into a repeatable pipeline</h4><p>You can run any combination of <a href=https://pypyr.io/docs/steps/cmd/>command</a>, <a href=https://pypyr.io/docs/steps/shell/>shell</a>, external executable, any callable, external script & <a href=https://pypyr.io/topics/inline-code/>inline code</a> in the same pipeline, alongside composable <a href=https://pypyr.io/docs/steps/>built-in steps</a> that do useful things like read & write files, format <a href=https://pypyr.io/topics/json/>json</a>, <a href=https://pypyr.io/topics/toml/>toml</a> & <a href=https://pypyr.io/topics/yaml/>yaml</a> and <a href=https://pypyr.io/topics/context/>manipulate data structures</a>.</p></div><div class="card elevation-01"><h4>human-friendly pipelines</h4><p>The <a href=https://pypyr.io/docs/pipelines/pipeline-structure/>pipeline yaml format</a> is human readable, human editable, human mergeable. You&rsquo;re meant to author pipelines by hand - because it&rsquo;s easy, and deliberately so! Definitely source-control your pipelines & get easy text-based diffs so you&rsquo;re not spending time deciphering opaque machine generated syntax & worrying about weird xml or json. Author your pipelines in whatever text editor makes you happy.</p></div><div class="card elevation-01"><h4>control flow with conditional execution, branching & looping</h4><p>Run your own code, scripts and commands in foreach and while <a href=https://pypyr.io/docs/getting-started/loops/>loops</a>. <a href=https://pypyr.io/docs/getting-started/conditional-logic/>Conditionally run or skip</a> your custom code based upon switches you control. You apply pypyr&rsquo;s <a href=https://pypyr.io/topics/control-of-flow/>control of flow</a> to your commands & scripts without having to do any coding. No more trying to remember how a bash IF statement works!</p></div><div class="card elevation-01"><h4>parallel execution</h4><p>Spawn asynchronous concurrent subprocesses without writing any code! Run <a href=https://pypyr.io/docs/steps/cmds/>programs in parallel</a> and <a href=https://pypyr.io/docs/steps/shells/>parallel shells</a> concurrently. You can also define serial sequences inside parallel workloads.</p></div><div class="card elevation-01"><h4>pass your own custom cli args</h4><p>You can use pypyr as a framework to write your own console applications without having to write code to capture, parse & validate <a href=https://pypyr.io/docs/context-parsers/>custom input cli args</a>.
So you can avoid all that repetitive plumbing when you&rsquo;re trying to automate something useful in a script.</p></div><div class="card elevation-01"><h4>automatic retries, error handling & compensations</h4><p>Automatically <a href=https://pypyr.io/docs/decorators/retry/>retry</a> your own commands & scripts when they fail, keep on retrying until it succeeds or until a retry limit you set. Selectively choose which errors should stop your pipeline execution. Use <a href=https://pypyr.io/docs/getting-started/error-handling/#failure-handlers>failure handlers</a> with multiple steps to catch exceptions and to encapsulate more complex error handling logic.</p></div><div class="card elevation-01"><h4>variable interpolation & substitution</h4><p>Use string interpolation or <a href=https://pypyr.io/docs/substitutions/format-string/>variable substitution</a> to replace a placeholder <code>{token}</code> with variable values. This works for strings, obviously, but also any complex type! You can replace a string <code>{placeholder}</code> with an entire data structure like a list or a map, or other simple types like int or bool.</p></div><div class="card elevation-01"><h4>configuration file tokenization</h4><p>Load, merge, format & interpolate values to-and-from <a href=https://pypyr.io/topics/filesystem/>text-based configuration files</a> such as json, toml & yaml. pypyr is very useful to prepare configuration files & templates you need to bootstrap bigger systems like Terraform, Cloudformation & Heat, where you might need to inject your own variable values into the configuration file on the fly rather than duplicate configuration per environment.</p></div><div class="card elevation-01"><h4>cli & api</h4><p>The <a href=https://pypyr.io/docs/cli/>pypyr CLI</a> favors minimal typing and sensible defaults. You can also invoke your pipelines from code using the Python <a href=https://pypyr.io/docs/api/run-pipeline/>pipeline API</a> from a single, simple entry-point function.</p></div><div class="card elevation-01"><h4>lotsa built-in steps & your own custom tasks</h4><p>pypyr has >30 ready-made <a href=https://pypyr.io/docs/steps/>built-in steps</a> that you can use as you see fit in your own pipelines. Coding your own step is as simple as bit of Python in a <a href=https://pypyr.io/docs/api/step/>single function definition</a>. Your own custom steps co-exist with built-in steps with exactly the same power and functionality for loops, retries & flow control without you having to write any extra code.</p></div><div class="card elevation-01"><h4>compose your tasks with modular step sequences</h4><p><a href=https://pypyr.io/docs/steps/pype/>Pipelines can call other pipelines</a>.
Organize your tasks into repeatable sequences using <a href=https://pypyr.io/docs/getting-started/basic-concepts/#step-group>step groups</a> within a pipeline so
you modularize & isolate more complex task sequences.</p></div><div class="card elevation-01"><h4>lots of documentation</h4><p>Plenty clear help documentation with examples. You&rsquo;re reading it right now. If you&rsquo;re new, <a href=https://pypyr.io/docs/getting-started/>let&rsquo;s start at the very beginning</a>.</p></div><div class="card elevation-01"><h4>devops, ci & cd automation tool</h4><p>You can automate any task sequence you want with pypyr. It so happens that pypyr is particularly strong at consolidating the ad hoc scripts that you tend to accrete over time for your CI/CD devops functions. Run the exact same CI/CD process locally as you would on your cloud provider. No more commits like &ldquo;ci build test 5 please work this time&rdquo;.</p></div><div class="card elevation-01"><h4>agentless pipeline execution</h4><p><a href=https://pypyr.io/docs/getting-started/installation/>Quick install</a> via <code>pip</code>.
pypyr runs on Linux, MacOS & Windows - anywhere with a Python runtime. With
bigger devops & workflow automation platforms providing the execution
environment in itself is a not a trivial task. pypyr is a lightweight Python
application with no further dependencies. You can even run pypyr from its
ready-made docker container.</p></div></section></main></div><footer class="footer elevation-01"><a href=/ class=top-nav-logo aria-label=home><img class=top-nav-logo-img src=https://pypyr.io/images/pypyr-logotype.2c9aa98c472f0ea8d436597c26ef1b0f042624ee19cdf69bcb89ac0025d146c4.svg alt="pypyr logo"></a><div class=col-1fr-centered><ul class=footer-social-links aria-label="social media links"><li><a href=https://twitter.com/pypyrpipes/ class=footer-social-link><div class=footer-social-links-pre><svg viewBox="0 0 400 400"><title>twitter link</title><use xlink:href="https://pypyr.io/icons/twitter-social-icon-circle-white.d715a98bf8d7170b3d2603d836ca675616731d85583c13d23ec468905e77c59a.svg#twitter-icon"/></svg></div><small>twitter</small></a></li><li><a href=https://github.com/pypyr/pypyr/ class=footer-social-link><div class=footer-social-links-pre><svg viewBox="0 0 32.58 31.77"><title>github link</title><use xlink:href="https://pypyr.io/icons/github-icon.778bc8065fb7e8d1e7109b270cfbd86e15e05bb16ebff30d261935e4bc1560bd.svg#github-icon"/></svg></div><small>github</small></a></li><li><a href=https://github.com/pypyr/pypyr/discussions class=footer-social-link><div class=footer-social-links-pre><svg viewBox="0 0 16 16"><title>discussion forum link</title><use xlink:href="https://pypyr.io/icons/discussions.a9f14951d81276183aaea73b6d616db95326f8f16350b221d9d6d48ee5a0b16e.svg#discussions-icon"/></svg></div><small>forum</small></a></li></ul><ul class=footer-notices-links aria-label="legal notices"><li><a href=/legal/privacy-notice class=muted-with-hover><small>privacy</small></a></li><li><a href=/legal/licensing class=muted-with-hover><small>licensing</small></a></li><li><a href=/press-kit class=muted-with-hover><small>press</small></a></li></ul></div></footer></body></html>